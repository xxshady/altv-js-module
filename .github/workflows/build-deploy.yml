name: Build & deploy server
on:
  push:
    branches: [ dev ]

jobs:
  build-windows:
    name: Build windows release
    runs-on: windows-2019
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Extract version
        id: version
        shell: bash
        run: |
          TAG=${GITHUB_REF/refs\/tags\//}
          echo ::set-output name=BRANCH::${TAG/\/*}
          echo ::set-output name=VERSION::${TAG/*\/}

      - name: Build
        shell: cmd
        run: |
          cd server
          build.bat 0 %VERSION%
        env:
          VERSION: ${{ steps.version.outputs.VERSION }}

      - name: Copy files
        shell: cmd
        run: |
          cd server
          mkdir upload\modules\js-module
          copy dist\js-module.dll upload\modules\js-module
          copy dist\libnode.dll upload\modules\js-module

      - uses: actions/upload-artifact@v2
        with:
          name: js-module-windows
          path: ./server/upload/

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-18.04
    needs: [build-windows]
    steps:
      - name: Download windows artifacts
        uses: actions/download-artifact@v2
        with:
          name: js-module-windows
          path: dist-windows

      - name: Zip artifacts
        run: |
          zip -r -j js-module-windows dist-windows

      - name: Extract version
        id: version
        shell: bash
        run: |
          TAG=${GITHUB_REF/refs\/tags\//}
          echo ::set-output name=BRANCH::${TAG/\/*}
          echo ::set-output name=VERSION::${TAG/*\/}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.version.outputs.VERSION }}

      - name: Upload windows artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./js-module-windows.zip
          asset_name: js-module-windows.zip
          asset_content_type: application/zip

  delete-artifacts:
    name: Delete artifacts
    runs-on: ubuntu-18.04
    needs: [ create-release ]
    if: ${{ always() }}
    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            js-module-windows
